name: Extension Publish Workflow

on:
  workflow_call:
    inputs:
      initial_version:
        required: true
        type: string
        description: 'Initial version for the module (e.g., "1.18")'
    secrets:
      OWNCLOUD_AUTH:
        required: true
      MIKO_LIC_REST_VENDOR_ID:
        required: true
      MIKO_LIC_REST_API_KEY:
        required: true
      MIKO_LIC_HOSTNAME:
        required: true
      WEBDAV_ROOT:
        required: true
      SHARE_API_URL:
        required: true

permissions:
  contents: write     # For creating releases
  packages: write     # For working with Container Registry

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog
          path: module

      - name: Checkout Actions Repository
        uses: actions/checkout@v4
        with:
          repository: mikopbx/.github-workflows
          path: .github-workflows

      - name: Get previous version
        id: get_version
        working-directory: module
        run: |
          # Try to get the latest release version
          LATEST_VERSION=$(gh release list -L 1 | cut -f1 | sed 's/v//' || echo "")
          
          if [ -z "$LATEST_VERSION" ]; then
            # If no releases found, use initial version
            echo "No previous releases found, using initial version"
            LATEST_VERSION="${{ inputs.initial_version }}"
          fi
          
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "Found latest version: $LATEST_VERSION"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Calculate new version
        id: calc_version
        run: |
          LATEST_VERSION="${{ steps.get_version.outputs.latest_version }}"
          
          # Split version into major and minor parts
          IFS='.' read -r major minor <<< "$LATEST_VERSION"
          
          # Increment minor version
          new_minor=$((minor + 1))
          
          # Create new version string
          NEW_VERSION="$major.$new_minor"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_version_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Calculated new version: $NEW_VERSION (from $LATEST_VERSION)"
          
          # Validate version format
          if ! echo "$NEW_VERSION" | grep -qE '^[0-9]+\.[0-9]+$'; then
            echo "Error: Invalid version format generated"
            exit 1
          fi
          
          # Verify major version matches initial version
          INITIAL_MAJOR=$(echo "${{ inputs.initial_version }}" | cut -d. -f1)
          if [ "$major" != "$INITIAL_MAJOR" ]; then
            echo "Error: Major version mismatch with initial version"
            exit 1
          fi

      - name: Build Docker image
        uses: ./.github-workflows/.github/actions/docker-build

      - name: Install Composer dependencies
        if: ${{ vars.USE_COMPOSER_DURING_MODULE_COMPILATION == 'true' }}
        working-directory: module
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            docker run --rm -v $PWD:/app -w /app \
              ghcr.io/mikopbx/modules-builder:latest \
              composer install --no-dev --ignore-platform-req=ext-curl --ignore-platform-req=ext-ldap \
              --ignore-platform-req=ext-phalcon --ignore-platform-req=ext-zip --ignore-platform-req=ext-mailparse
          fi

      - name: Update module version
        working-directory: module
        run: |
          # Update version in module.json
          docker run --rm -v $PWD:/app -w /app \
            ghcr.io/mikopbx/modules-builder:latest \
            sed -i "s/\"version\".*$/\"version\" : \"${{ steps.calc_version.outputs.new_version }}\",/" module.json

      - name: Create module archive
        working-directory: module
        run: |
          # Create ZIP archive with new version number
          MODULE_RELEASE_FILENAME="${{ github.event.repository.name }}.${{ steps.calc_version.outputs.new_version }}.zip"
          docker run --rm -v $PWD:/app -w /app \
            ghcr.io/mikopbx/modules-builder:latest \
            zip -r "$MODULE_RELEASE_FILENAME" ./*
          echo "module_filename=$MODULE_RELEASE_FILENAME" >> $GITHUB_ENV
          
      - name: Create WebDAV directory
        if: github.ref == 'refs/heads/master'
        working-directory: module
        run: |
          # Ensure WebDAV directory exists for the module
          # First create parent directory if not exists
          docker run --rm -v $PWD:/app -w /app \
            ghcr.io/mikopbx/modules-builder:latest \
            curl -u ${{ secrets.OWNCLOUD_AUTH }} -X MKCOL "${{ secrets.WEBDAV_ROOT }}/update.miko.ru"

          # Then create MikoPBXPlugins directory
          docker run --rm -v $PWD:/app -w /app \
            ghcr.io/mikopbx/modules-builder:latest \
            curl -u ${{ secrets.OWNCLOUD_AUTH }} -X MKCOL "${{ secrets.WEBDAV_ROOT }}/update.miko.ru/MikoPBXPlugins"

          # Finally create module-specific directory
          docker run --rm -v $PWD:/app -w /app \
            ghcr.io/mikopbx/modules-builder:latest \
            curl -u ${{ secrets.OWNCLOUD_AUTH }} -X MKCOL "${{ secrets.WEBDAV_ROOT }}/update.miko.ru/MikoPBXPlugins/${{ github.event.repository.name }}"

      - name: Upload to files.miko.ru
        if: github.ref == 'refs/heads/master'
        working-directory: module
        run: |
          # Upload module archive to the module-specific directory
          docker run --rm -v $PWD:/app -w /app \
            ghcr.io/mikopbx/modules-builder:latest \
            curl -u ${{ secrets.OWNCLOUD_AUTH }} -T ${{ env.module_filename }} "${{ secrets.WEBDAV_ROOT }}/update.miko.ru/MikoPBXPlugins/${{ github.event.repository.name }}/"

      - name: Generate changelog
        id: changelog
        working-directory: module
        run: |
          # Generate changelog from git commits since last tag
          CHANGELOG=$(git log $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD --pretty=format:"- %s")
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" > changelog.txt
          
      # Update the release JSON generation to use correct path
      - name: Generate release JSON
        if: github.ref == 'refs/heads/master'
        working-directory: module
        run: |
          # Create JSON with release information
          docker run --rm -v $PWD:/app -w /app \
            ghcr.io/mikopbx/modules-builder:latest bash -c '
            CHANGELOG=$(cat changelog.txt)
            CHANGELOG_URL_ENC=$(echo "$CHANGELOG" | jq -Rr @uri)

            # Use the correct path for share creation
            MODULE_PATH="/update.miko.ru/MikoPBXPlugins/${{ github.event.repository.name }}/${{ env.module_filename }}"
            LINK=$(curl "${{ secrets.SHARE_API_URL }}" -k -u ${{ secrets.OWNCLOUD_AUTH }} -X POST --data "path=$MODULE_PATH&shareType=3" | xpath -e "/ocs/data/url/text()")
            
            if [ -z "$LINK" ]; then
              echo "Error: Failed to get share link"
              exit 1
            fi
            
            LINK_FULL="$LINK/download"
            
            jq -n \
              --arg guid "${{ github.event.repository.name }}" \
              --arg link "$LINK_FULL" \
              --arg version "${{ steps.calc_version.outputs.new_version }}" \
              --arg md5 "$(md5sum ${{ env.module_filename }} | cut -d" " -f1)" \
              --arg size "$(stat -c%s "${{ env.module_filename }}")" \
              --arg minver "$(grep -oP "\"min_pbx_version\".+?[\"\047]\K[^\"\047]+" module.json)" \
              --arg changelog "$CHANGELOG_URL_ENC" \
              --arg origpath "$MODULE_PATH" \
              --arg name "${{ env.module_filename }}" \
              '"{"GUID":$guid,"LINK":$link,"VERSION":$version,"MD5":$md5,"SIZE":$size,"MINPBXVER":$minver,"CHANGELOG":$changelog,"RELEASENOW":"false","ORIGINALPATH":$origpath,"NAME":$name}"' \
              > release.json'

      - name: Create release on update.mikopbx.com
        if: github.ref == 'refs/heads/master'
        working-directory: module
        run: |
          # Submit release to MikoPBX update server
          docker run --rm -v $PWD:/app -w /app \
            ghcr.io/mikopbx/modules-builder:latest bash -c '
            REQUEST_TIME=$(date +%s)
            API_HASH=$(echo -n "${REQUEST_TIME}${{ secrets.MIKO_LIC_REST_VENDOR_ID }}${{ secrets.MIKO_LIC_REST_API_KEY }}" | sha512sum | cut -d" " -f1)
            
            curl -k -s \
              -X POST "${{ secrets.MIKO_LIC_HOSTNAME }}/restapi/v1/addNewRelease" \
              -H "API_ID: ${{ secrets.MIKO_LIC_REST_VENDOR_ID }}" \
              -H "API_TIME: $REQUEST_TIME" \
              -H "API_HASH: $API_HASH" \
              -H "Content-Type: application/json; charset=utf-8" \
              -d @release.json'

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/master'
        working-directory: module
        run: |
          # Create GitHub release and upload assets
          gh release create ${{ steps.calc_version.outputs.new_version_tag }} \
            ${{ env.module_filename }} \
            --title "Release ${{ steps.calc_version.outputs.new_version }}" \
            --notes "${{ steps.changelog.outputs.CHANGELOG }}" \
            --target ${{ github.sha }}
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}
          path: module/${{ env.module_filename }}
