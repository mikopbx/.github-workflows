name: 'Publish Module'
description: 'Publishes module to files.miko.ru and releases.mikopbx.com'

inputs:
  module_filename:
    description: 'Module archive filename'
    required: true
  version:
    description: 'Module version'
    required: true
  changelog:
    description: 'Changelog content'
    required: true
  php_version:
    description: 'PHP version to use (7.4 or 8.3)'
    required: true
    default: '7.4'

runs:
  using: "composite"
  steps:
    - name: Create WebDAV directory structure
      shell: bash
      env:
        OWNCLOUD_AUTH: ${{ env.OWNCLOUD_AUTH }}
        WEBDAV_ROOT: ${{ env.WEBDAV_ROOT }}
      run: |
        for DIR in "update.miko.ru" "update.miko.ru/MikoPBXPlugins" "update.miko.ru/MikoPBXPlugins/${{ github.event.repository.name }}"; do
          echo "Creating directory: $DIR"
          docker run --rm -v $PWD/module:/app -w /app \
            ghcr.io/mikopbx/modules-builder-php${{ inputs.php_version }}:latest \
            curl -u "$OWNCLOUD_AUTH" -X MKCOL "$WEBDAV_ROOT/$DIR"
        done

    - name: Upload to files.miko.ru
      shell: bash
      env:
        OWNCLOUD_AUTH: ${{ env.OWNCLOUD_AUTH }}
        WEBDAV_ROOT: ${{ env.WEBDAV_ROOT }}
      working-directory: ${{ github.workspace }}/module
      run: |
        echo "Uploading module archive to files.miko.ru..."
        docker run --rm -v $PWD:/app -w /app \
          ghcr.io/mikopbx/modules-builder-php${{ inputs.php_version }}:latest \
          curl -u "$OWNCLOUD_AUTH" -T "${{ inputs.module_filename }}" \
          "$WEBDAV_ROOT/update.miko.ru/MikoPBXPlugins/${{ github.event.repository.name }}/"

    - name: Generate release JSON
      shell: bash
      env:
        OWNCLOUD_AUTH: ${{ env.OWNCLOUD_AUTH }}
        SHARE_API_URL: ${{ env.SHARE_API_URL }}
      working-directory: ${{ github.workspace }}/module
      run: |
        CHANGELOG="${{ inputs.changelog }}"
        CHANGELOG_URL_ENC=$(echo "$CHANGELOG" | jq -Rr @uri)
        
        MODULE_PATH="/update.miko.ru/MikoPBXPlugins/${{ github.event.repository.name }}/${{ inputs.module_filename }}"
        
        SHARE_RESPONSE=$(curl -s "$SHARE_API_URL" -k -u "$OWNCLOUD_AUTH" \
          -X POST --data "path=$MODULE_PATH&shareType=3")
        
        LINK=$(echo "$SHARE_RESPONSE" | grep -oP "(?<=<url>)[^<]+")
        
        if [ -z "$LINK" ]; then
          echo "Error: Failed to get share link"
          exit 1
        fi
        
        LINK_FULL="$LINK/download"
        MD5=$(md5sum "${{ inputs.module_filename }}" | cut -d" " -f1)
        SIZE=$(stat -c%s "${{ inputs.module_filename }}")
        MIN_PBX_VERSION=$(grep -oP "\"min_pbx_version\".+?[\"\047]\K[^\"\047]+" module.json || echo "")
        
        jq -n \
          --arg guid "${{ github.event.repository.name }}" \
          --arg link "$LINK_FULL" \
          --arg version "${{ inputs.version }}" \
          --arg md5 "$MD5" \
          --arg size "$SIZE" \
          --arg minver "$MIN_PBX_VERSION" \
          --arg changelog "$CHANGELOG_URL_ENC" \
          --arg origpath "$MODULE_PATH" \
          --arg name "${{ inputs.module_filename }}" \
          '{
            "GUID": $guid,
            "LINK": $link,
            "VERSION": $version,
            "MD5": $md5,
            "SIZE": $size,
            "MINPBXVER": $minver,
            "CHANGELOG": $changelog,
            "RELEASENOW": "false",
            "ORIGINALPATH": $origpath,
            "NAME": $name
          }' > release.json
        
        # Validate JSON format
        if ! jq empty release.json; then
          echo "Error: Invalid JSON generated"
          exit 1
        fi

    - name: Submit to MikoPBX Release Server
      shell: bash
      env:
        MIKO_LIC_HOSTNAME: ${{ env.MIKO_LIC_HOSTNAME }}
        MIKO_LIC_REST_VENDOR_ID: ${{ env.MIKO_LIC_REST_VENDOR_ID }}
        MIKO_LIC_REST_API_KEY: ${{ env.MIKO_LIC_REST_API_KEY }}
      working-directory: ${{ github.workspace }}/module
      run: |
        if [ ! -f "release.json" ]; then
          echo "Error: release.json not found"
          exit 1
        fi
        
        REQUEST_TIME=$(date +%s)
        API_HASH=$(echo -n "${REQUEST_TIME}${MIKO_LIC_REST_VENDOR_ID}${MIKO_LIC_REST_API_KEY}" | sha512sum | cut -d" " -f1)
        
        echo "Publishing release to MikoPBX update server..."
        RESPONSE=$(curl -s -k \
          -X POST "$MIKO_LIC_HOSTNAME/restapi/v1/addNewRelease" \
          -H "API_ID: $MIKO_LIC_REST_VENDOR_ID" \
          -H "API_TIME: $REQUEST_TIME" \
          -H "API_HASH: $API_HASH" \
          -H "Content-Type: application/json; charset=utf-8" \
          -d @release.json)
        
        STATUS=$(echo "$RESPONSE" | jq -r '.status')
        if [ "$STATUS" = "ok" ]; then
          echo "Release published successfully!"
        else
          echo "Error: Failed to publish release. Status: $STATUS"
          exit 1
        fi
